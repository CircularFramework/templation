{"version":3,"sources":["../../src/classes/observer.class.js"],"names":["Observer","obj","callback","compiler","bind","observe","Array","isArray","hasOwnProperty","observeArray","prop","observeProp","self","value","Object","defineProperty","get","set","newValue","arrayObj","arrayMethods","forEach","_method","prototype","m","configurable","enumerable","writable","result","apply","arguments"],"mappings":"w7BAAA;;;;;MAMMA,S,YACL,kBAAYC,GAAZ,CAAiBC,QAAjB,CAA2BC,QAA3B,CAAqC,gCACpC,wBAEA,0CACA,KAAKF,GAAL,CAAWA,GAAX,CAEA,mFACA,KAAKC,QAAL,CAAgBA,SAASE,IAAT,CAAcD,QAAd,CAAhB,CAEA,sBACA,KAAKE,OAAL,CAAa,KAAKJ,GAAlB,CACA,CAED;;;;iEAKQA,G,CAAK,CACZ,kCACA,GAAIK,MAAMC,OAAN,CAAcN,GAAd,GAAsB,CAACA,IAAIO,cAAJ,CAAmB,MAAnB,CAA3B,CAAuD,KAAKC,YAAL,CAAkBR,GAAlB,EAEvD,wDACA,IAAK,GAAIS,KAAT,GAAiBT,IAAjB,CAAsB,CACrB,KAAKU,WAAL,CAAiBV,GAAjB,CAAsBS,IAAtB,EACA,GAAI,QAAOT,IAAIS,IAAJ,CAAP,IAAqB,QAAzB,CAAmC,CAClC,KAAKL,OAAL,CAAaJ,IAAIS,IAAJ,CAAb,CACA,CACD,CACD,CAED,mD,gDACYT,G,CAAKS,I,CAAM,CACtB,8BACA,GAAIE,MAAO,IAAX,CAEA,2DACA,GAAIC,OAAQZ,IAAIS,IAAJ,CAAZ,CACAI,OAAOC,cAAP,CAAsBd,GAAtB,CAA2BS,IAA3B,CAAiC,CAChCM,GADgC,eACzB,CACN,MAAOH,MACP,CAH+B,CAIhCI,GAJgC,cAI3BC,QAJ2B,CAIjB,CACd,qCACAL,MAAQK,QAAR,CAEA,uBACA,GAAI,OAAOL,MAAP,mCAAOA,KAAP,KAAiB,QAArB,CAA+BD,KAAKP,OAAL,CAAaQ,KAAb,EAE/B,oBACAD,KAAKV,QAAL,EACA,CAb+B,CAAjC,CAeA,CAED,mC,kDACaiB,Q,CAAU,CACtB,8BACA,GAAIP,MAAO,IAAX,CAEA,8BACA,GAAMQ,cAAe,CAAC,MAAD,CAAS,KAAT,CAAgB,OAAhB,CAAyB,SAAzB,CAAoC,QAApC,CAArB,CACAA,aAAaC,OAAb,CAAqB,WAAK,CACzB,GAAMC,SAAUhB,MAAMiB,SAAN,CAAgBC,CAAhB,CAAhB,CACAV,OAAOC,cAAP,CAAsBI,QAAtB,CAAgCK,CAAhC,CAAmC,CAClCC,aAAc,KADoB,CAElCC,WAAY,KAFsB,CAGlCC,SAAU,KAHwB,CAIlCd,MAAO,gBAAY,CAClB,gDACA,GAAIe,QAASN,QAAQO,KAAR,CAAc,IAAd,CAAoBC,SAApB,CAAb,CAEA,wCACAlB,KAAKP,OAAL,CAAa,IAAb,EAEA,oBACAO,KAAKV,QAAL,GAEA,wBACA,MAAO0B,OACP,CAhBiC,CAAnC,CAkBA,CApBD,CAqBA,C,uBAGF,uB,QACS5B,Q,CAAAA,Q","file":"observer.class.js","sourcesContent":["/**\n * @class Observer\n * Recursively observes every property on an object\n * @param {object} obj The object to setup observance on\n * @param {function} callback The callback function to execute when the data has changed\n */\nclass Observer {\n\tconstructor(obj, callback, compiler) {\n\t\t/** public properties */\n\n\t\t/** @public {object} The obj to observe */\n\t\tthis.obj = obj;\n\n\t\t/** @public {function} The callback function to execute when the obj has changed */\n\t\tthis.callback = callback.bind(compiler);\n\t\n\t\t/** start observing */\n\t\tthis.observe(this.obj);\n\t}\n\n\t/**\n\t * @method Setup data observation on an object\n\t * @param {object} An object to observe\n\t * @returns {Directive}\n\t */\n\tobserve(obj) {\n\t\t/** check for array and observe */\n\t\tif (Array.isArray(obj) && !obj.hasOwnProperty('push')) this.observeArray(obj);\n\n\t\t/** for every property on the object setup observance */\n\t\tfor (let prop in obj) {\n\t\t\tthis.observeProp(obj, prop);\n\t\t\tif (typeof obj[prop] === 'object') {\n\t\t\t\tthis.observe(obj[prop]);\n\t\t\t}\n\t\t}\n\t}\n\n\t/** observe the value of a property on an object */\n\tobserveProp(obj, prop) {\n\t\t/** get a reference to this */\n\t\tlet self = this;\n\n\t\t/** create getter / setter for firing callback on change */\n\t\tlet value = obj[prop];\n\t\tObject.defineProperty(obj, prop, {\n\t\t\tget () {\n\t\t\t\treturn value;\n\t\t\t},\n\t\t\tset (newValue) {\n\t\t\t\t/** set the value to the new value */\n\t\t\t\tvalue = newValue;\n\n\t\t\t\t/** setup observance */\n\t\t\t\tif (typeof value === 'object') self.observe(value);\n\n\t\t\t\t/** fire callback */\n\t\t\t\tself.callback();\n\t\t\t}\n\t\t});\n\t}\n\n\t/** observe an array for changes */\n\tobserveArray(arrayObj) {\n\t\t/** get a reference to this */\n\t\tlet self = this;\n\t\t\n\t\t/** overwrite array methods */\n\t\tconst arrayMethods = ['push', 'pop', 'shift', 'unshift', 'splice'];\n\t\tarrayMethods.forEach(m => {\n\t\t\tconst _method = Array.prototype[m];\n\t\t\tObject.defineProperty(arrayObj, m, {\n\t\t\t\tconfigurable: false,\n\t\t\t\tenumerable: false,\n\t\t\t\twritable: false,\n\t\t\t\tvalue: function () {\n\t\t\t\t\t/** get the result of the base array function */\n\t\t\t\t\tlet result = _method.apply(this, arguments);\n\n\t\t\t\t\t/** setup observance on the new value */\n\t\t\t\t\tself.observe(this);\n\n\t\t\t\t\t/** fire callback */\n\t\t\t\t\tself.callback();\n\n\t\t\t\t\t/** return the result */\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\n/** export the class */\nexport { Observer };"]}