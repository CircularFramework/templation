{"version":3,"sources":["../../src/classes/observer.class.js"],"names":["Observer","obj","callback","compiler","bind","observe","Array","isArray","hasOwnProperty","observeArray","prop","observeProp","self","value","Object","defineProperty","get","set","newValue","arrayObj","arrayMethods","forEach","_method","prototype","m","configurable","enumerable","writable","result","apply","arguments"],"mappings":";;;;;;;;;;;;AAAA;;;;;;IAMMA,Q;AACL,mBAAYC,GAAZ,EAAiBC,QAAjB,EAA2BC,QAA3B,EAAqC;AAAA;;AACpC;;AAEA;AACA,OAAKF,GAAL,GAAWA,GAAX;;AAEA;AACA,OAAKC,QAAL,GAAgBA,SAASE,IAAT,CAAcD,QAAd,CAAhB;;AAEA;AACA,OAAKE,OAAL,CAAa,KAAKJ,GAAlB;AACA;;AAED;;;;;;;;;0BAKQA,G,EAAK;AACZ;AACA,OAAIK,MAAMC,OAAN,CAAcN,GAAd,KAAsB,CAACA,IAAIO,cAAJ,CAAmB,MAAnB,CAA3B,EAAuD,KAAKC,YAAL,CAAkBR,GAAlB;;AAEvD;AACA,QAAK,IAAIS,IAAT,IAAiBT,GAAjB,EAAsB;AACrB,SAAKU,WAAL,CAAiBV,GAAjB,EAAsBS,IAAtB;AACA,QAAI,QAAOT,IAAIS,IAAJ,CAAP,MAAqB,QAAzB,EAAmC;AAClC,UAAKL,OAAL,CAAaJ,IAAIS,IAAJ,CAAb;AACA;AACD;AACD;;AAED;;;;8BACYT,G,EAAKS,I,EAAM;AACtB;AACA,OAAIE,OAAO,IAAX;;AAEA;AACA,OAAIC,QAAQZ,IAAIS,IAAJ,CAAZ;AACAI,UAAOC,cAAP,CAAsBd,GAAtB,EAA2BS,IAA3B,EAAiC;AAChCM,OADgC,iBACzB;AACN,YAAOH,KAAP;AACA,KAH+B;AAIhCI,OAJgC,eAI3BC,QAJ2B,EAIjB;AACd;AACAL,aAAQK,QAAR;;AAEA;AACA,SAAI,QAAOL,KAAP,yCAAOA,KAAP,OAAiB,QAArB,EAA+BD,KAAKP,OAAL,CAAaQ,KAAb;;AAE/B;AACAD,UAAKV,QAAL;AACA;AAb+B,IAAjC;AAeA;;AAED;;;;+BACaiB,Q,EAAU;AACtB;AACA,OAAIP,OAAO,IAAX;;AAEA;AACA,OAAMQ,eAAe,CAAC,MAAD,EAAS,KAAT,EAAgB,OAAhB,EAAyB,SAAzB,EAAoC,QAApC,CAArB;AACAA,gBAAaC,OAAb,CAAqB,aAAK;AACzB,QAAMC,UAAUhB,MAAMiB,SAAN,CAAgBC,CAAhB,CAAhB;AACAV,WAAOC,cAAP,CAAsBI,QAAtB,EAAgCK,CAAhC,EAAmC;AAClCC,mBAAc,KADoB;AAElCC,iBAAY,KAFsB;AAGlCC,eAAU,KAHwB;AAIlCd,YAAO,iBAAY;AAClB;AACA,UAAIe,SAASN,QAAQO,KAAR,CAAc,IAAd,EAAoBC,SAApB,CAAb;;AAEA;AACAlB,WAAKP,OAAL,CAAa,IAAb;;AAEA;AACAO,WAAKV,QAAL;;AAEA;AACA,aAAO0B,MAAP;AACA;AAhBiC,KAAnC;AAkBA,IApBD;AAqBA;;;;;;AAGF;;;QACS5B,Q,GAAAA,Q","file":"observer.class.js","sourcesContent":["/**\n * @class Observer\n * Recursively observes every property on an object\n * @param {object} obj The object to setup observance on\n * @param {function} callback The callback function to execute when the data has changed\n */\nclass Observer {\n\tconstructor(obj, callback, compiler) {\n\t\t/** public properties */\n\n\t\t/** @public {object} The obj to observe */\n\t\tthis.obj = obj;\n\n\t\t/** @public {function} The callback function to execute when the obj has changed */\n\t\tthis.callback = callback.bind(compiler);\n\t\n\t\t/** start observing */\n\t\tthis.observe(this.obj);\n\t}\n\n\t/**\n\t * @method Setup data observation on an object\n\t * @param {object} An object to observe\n\t * @returns {Directive}\n\t */\n\tobserve(obj) {\n\t\t/** check for array and observe */\n\t\tif (Array.isArray(obj) && !obj.hasOwnProperty('push')) this.observeArray(obj);\n\n\t\t/** for every property on the object setup observance */\n\t\tfor (let prop in obj) {\n\t\t\tthis.observeProp(obj, prop);\n\t\t\tif (typeof obj[prop] === 'object') {\n\t\t\t\tthis.observe(obj[prop]);\n\t\t\t}\n\t\t}\n\t}\n\n\t/** observe the value of a property on an object */\n\tobserveProp(obj, prop) {\n\t\t/** get a reference to this */\n\t\tlet self = this;\n\n\t\t/** create getter / setter for firing callback on change */\n\t\tlet value = obj[prop];\n\t\tObject.defineProperty(obj, prop, {\n\t\t\tget () {\n\t\t\t\treturn value;\n\t\t\t},\n\t\t\tset (newValue) {\n\t\t\t\t/** set the value to the new value */\n\t\t\t\tvalue = newValue;\n\n\t\t\t\t/** setup observance */\n\t\t\t\tif (typeof value === 'object') self.observe(value);\n\n\t\t\t\t/** fire callback */\n\t\t\t\tself.callback();\n\t\t\t}\n\t\t});\n\t}\n\n\t/** observe an array for changes */\n\tobserveArray(arrayObj) {\n\t\t/** get a reference to this */\n\t\tlet self = this;\n\t\t\n\t\t/** overwrite array methods */\n\t\tconst arrayMethods = ['push', 'pop', 'shift', 'unshift', 'splice'];\n\t\tarrayMethods.forEach(m => {\n\t\t\tconst _method = Array.prototype[m];\n\t\t\tObject.defineProperty(arrayObj, m, {\n\t\t\t\tconfigurable: false,\n\t\t\t\tenumerable: false,\n\t\t\t\twritable: false,\n\t\t\t\tvalue: function () {\n\t\t\t\t\t/** get the result of the base array function */\n\t\t\t\t\tlet result = _method.apply(this, arguments);\n\n\t\t\t\t\t/** setup observance on the new value */\n\t\t\t\t\tself.observe(this);\n\n\t\t\t\t\t/** fire callback */\n\t\t\t\t\tself.callback();\n\n\t\t\t\t\t/** return the result */\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\n/** export the class */\nexport { Observer };"]}