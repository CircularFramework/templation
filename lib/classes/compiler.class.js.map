{"version":3,"sources":["../../src/classes/compiler.class.js"],"names":["Compiler","container","template","data","document","getElementById","nodeName","content","children","length","_initd","setInitd","initd","_observer","render","getObserver","_directiveContainer","setDirectiveContainer","directiveContainer","getDirectiveContainer","tempDOM","getDirectives","undefined","filter","dir","isPost"],"mappings":";;;;;;;qjBAAA;;;AACA;;AACA;;;;AAEA;;;;;;;IAOMA,Q;AACL,mBAAYC,SAAZ,EAAuBC,QAAvB,EAAiCC,IAAjC,EAAuC;AAAA;;AAAA;;AACtC;AACA,MAAI,OAAOF,SAAP,KAAqB,QAAzB,EAAmCA,YAAYG,SAASC,cAAT,CAAwBJ,SAAxB,CAAZ;;AAEnC;AACA,MAAI,OAAOC,QAAP,KAAoB,QAAxB,EAAkCA,WAAWE,SAASC,cAAT,CAAwBH,QAAxB,CAAX;;AAElC;AACA,MAAIA,SAASI,QAAT,KAAsB,UAA1B,EAAsC,MAAM,wDAAN;AACtC,MAAIJ,SAASK,OAAT,CAAiBC,QAAjB,CAA0BC,MAA1B,KAAqC,CAAzC,EAA4C,MAAM,6CAAN;;AAE5C;;AAEA;AACA,OAAKR,SAAL,GAAiBA,SAAjB;;AAEA;AACA,OAAKC,QAAL,GAAgBA,QAAhB;;AAEA;AACA,OAAKC,IAAL,GAAYA,IAAZ;;AAEA;;AAEA;AACA,MAAIO,SAAS,KAAb;AACA,OAAKC,QAAL,GAAgB,UAACC,KAAD,EAAW;AAC1BF,YAASE,KAAT;AACA;AACA,GAHD;AAIA,OAAKA,KAAL,GAAa,YAAM;AAAE,UAAOF,MAAP;AAAgB,GAArC;;AAEA;AACA,MAAIG,YAAY,wBAAa,KAAKV,IAAlB,EAAwB,KAAKW,MAA7B,EAAqC,IAArC,CAAhB;AACA,OAAKC,WAAL,GAAmB,YAAM;AAAE,UAAOF,SAAP;AAAmB,GAA9C;;AAEA;AACA,MAAIG,sBAAsB,IAA1B;AACA,OAAKC,qBAAL,GAA6B,UAACC,kBAAD,EAAwB;AAAEF,yBAAsBE,kBAAtB;AAA2C,GAAlG;AACA,OAAKC,qBAAL,GAA6B,YAAM;AAAE,UAAOH,mBAAP;AAA6B,GAAlE;;AAEA;AACA,+BAAa,KAAKf,SAAlB;AACA;;AAED;;AAEA;;;;;2BACS;AACR;AACA,OAAMmB,UAAU,mCAAmB,KAAKlB,QAAxB,EAAkC,KAAKC,IAAvC,EAA6C,KAAKgB,qBAAL,GAA6BE,aAA7B,EAA7C,CAAhB;;AAEA;AACA,6BAAU,KAAKpB,SAAf,EAA0B,8BAAcmB,QAAQb,OAAR,CAAgBC,QAAhB,CAAyB,CAAzB,CAAd,CAA1B,EAAsE,KAAKI,KAAL,KAAe,8BAAc,KAAKX,SAAL,CAAeO,QAAf,CAAwB,CAAxB,CAAd,CAAf,GAA2Dc,SAAjI;;AAEA;AACA,mCAAgB,KAAKH,qBAAL,GAA6BE,aAA7B,GAA6CE,MAA7C,CAAoD;AAAA,WAAOC,IAAIC,MAAJ,EAAP;AAAA,IAApD,CAAhB,EAA0F,KAAKxB,SAA/F,EAA0G,KAAKE,IAA/G;;AAEA;AACA,QAAKQ,QAAL,CAAc,IAAd;AACA;;;;;;AAGF;;;QACSX,Q,GAAAA,Q","file":"compiler.class.js","sourcesContent":["/** import dependencies */\nimport { Observer } from './observer.class';\nimport { emptyElement, createTemporaryDOM, virtualizeDOM, parseDirectives, updateDOM } from '../functions';\n\n/**\n * @class Compiler\n * Compile the given template and push into the container\n * @param {string | element} container The container for the compiled html\n * @param {string | element} template The template to use for compilation\n * @param {object} data The object used for binding data and methods\n */\nclass Compiler {\n\tconstructor(container, template, data) {\n\t\t/** check container for string id, or element */\n\t\tif (typeof container === 'string') container = document.getElementById(container);\n\t\n\t\t/** check template for string id, or element */\n\t\tif (typeof template === 'string') template = document.getElementById(template);\n\t\n\t\t/** check the template for one and only one child */\n\t\tif (template.nodeName !== 'TEMPLATE') throw 'The template should be a template element (<template>)';\n\t\tif (template.content.children.length !== 1) throw 'The template must contain one root element.';\n\n\t\t/** public properties */\n\n\t\t/** @public {element} The container element */\n\t\tthis.container = container;\n\t\n\t\t/** @public {element} The template element */\n\t\tthis.template = template;\n\t\n\t\t/** @public {object} The data object that is used for binding data values and methods */\n\t\tthis.data = data;\n\n\t\t/** private properties */\n\n\t\t/** @private {boolean} A boolean indicating whether compilation has been initiated once */\n\t\tlet _initd = false;\n\t\tthis.setInitd = (initd) => {\n\t\t\t_initd = initd;\n\t\t\treturn this;\n\t\t};\n\t\tthis.initd = () => { return _initd; };\n\n\t\t/** @private {Observer} An instance of Observer that is watching data for us */\n\t\tlet _observer = new Observer(this.data, this.render, this)\n\t\tthis.getObserver = () => { return _observer; };\n\n\t\t/** @private {DirectiveContainer} The DirectiveContainer object */\n\t\tlet _directiveContainer = null;\n\t\tthis.setDirectiveContainer = (directiveContainer) => { _directiveContainer = directiveContainer; };\n\t\tthis.getDirectiveContainer = () => { return _directiveContainer; };\n\n\t\t/** empty the container */\n\t\temptyElement(this.container);\n\t}\n\n\t/** public methods */\n\n\t/** render out the processed template */\n\trender() {\n\t\t/** get the template and inner html */\n\t\tconst tempDOM = createTemporaryDOM(this.template, this.data, this.getDirectiveContainer().getDirectives());\n\n\t\t/** set the app */\n\t\tupdateDOM(this.container, virtualizeDOM(tempDOM.content.children[0]), this.initd() ? virtualizeDOM(this.container.children[0]) : undefined);\n\t\t\n\t\t/** cycle through post directives */\n\t\tparseDirectives(this.getDirectiveContainer().getDirectives().filter(dir => dir.isPost()), this.container, this.data);\n\n\t\t/** set initd to true */\n\t\tthis.setInitd(true);\n\t}\n}\n\n/** export Compiler */\nexport { Compiler };"]}