{"version":3,"sources":["../../src/classes/compiler.class.js"],"names":["Compiler","container","template","data","document","getElementById","nodeName","content","children","length","_initd","setInitd","initd","_observer","render","getObserver","_directiveContainer","setDirectiveContainer","directiveContainer","getDirectiveContainer","tempDOM","getDirectives","undefined","filter","dir","isPost"],"mappings":"4lBAAA,0BACA,2CACA,uC,gJAEA;;;;;;MAOMA,S,YACL,kBAAYC,SAAZ,CAAuBC,QAAvB,CAAiCC,IAAjC,CAAuC,+CACtC,gDACA,GAAI,MAAOF,UAAP,GAAqB,QAAzB,CAAmCA,UAAYG,SAASC,cAAT,CAAwBJ,SAAxB,CAAZ,CAEnC,+CACA,GAAI,MAAOC,SAAP,GAAoB,QAAxB,CAAkCA,SAAWE,SAASC,cAAT,CAAwBH,QAAxB,CAAX,CAElC,oDACA,GAAIA,SAASI,QAAT,GAAsB,UAA1B,CAAsC,KAAM,wDAAN,CACtC,GAAIJ,SAASK,OAAT,CAAiBC,QAAjB,CAA0BC,MAA1B,GAAqC,CAAzC,CAA4C,KAAM,6CAAN,CAE5C,wBAEA,8CACA,KAAKR,SAAL,CAAiBA,SAAjB,CAEA,6CACA,KAAKC,QAAL,CAAgBA,QAAhB,CAEA,wFACA,KAAKC,IAAL,CAAYA,IAAZ,CAEA,yBAEA,0FACA,GAAIO,QAAS,KAAb,CACA,KAAKC,QAAL,CAAgB,SAACC,KAAD,CAAW,CAC1BF,OAASE,KAAT,CACA,YACA,CAHD,CAIA,KAAKA,KAAL,CAAa,UAAM,CAAE,MAAOF,OAAS,CAArC,CAEA,+EACA,GAAIG,WAAY,wBAAa,KAAKV,IAAlB,CAAwB,KAAKW,MAA7B,CAAqC,IAArC,CAAhB,CACA,KAAKC,WAAL,CAAmB,UAAM,CAAE,MAAOF,UAAY,CAA9C,CAEA,kEACA,GAAIG,qBAAsB,IAA1B,CACA,KAAKC,qBAAL,CAA6B,SAACC,kBAAD,CAAwB,CAAEF,oBAAsBE,kBAAqB,CAAlG,CACA,KAAKC,qBAAL,CAA6B,UAAM,CAAE,MAAOH,oBAAsB,CAAlE,CAEA,0BACA,4BAAa,KAAKf,SAAlB,CACA,CAED,qBAEA,wC,4DACS,CACR,sCACA,GAAMmB,SAAU,kCAAmB,KAAKlB,QAAxB,CAAkC,KAAKC,IAAvC,CAA6C,KAAKgB,qBAAL,GAA6BE,aAA7B,EAA7C,CAAhB,CAEA,kBACA,yBAAU,KAAKpB,SAAf,CAA0B,6BAAcmB,QAAQb,OAAR,CAAgBC,QAAhB,CAAyB,CAAzB,CAAd,CAA1B,CAAsE,KAAKI,KAAL,GAAe,6BAAc,KAAKX,SAAL,CAAeO,QAAf,CAAwB,CAAxB,CAAd,CAAf,CAA2Dc,SAAjI,EAEA,oCACA,+BAAgB,KAAKH,qBAAL,GAA6BE,aAA7B,GAA6CE,MAA7C,CAAoD,oBAAOC,KAAIC,MAAJ,EAAP,CAApD,CAAhB,CAA0F,KAAKxB,SAA/F,CAA0G,KAAKE,IAA/G,EAEA,wBACA,KAAKQ,QAAL,CAAc,IAAd,CACA,C,uBAGF,sB,QACSX,Q,CAAAA,Q","file":"compiler.class.js","sourcesContent":["/** import dependencies */\nimport { Observer } from './observer.class';\nimport { emptyElement, createTemporaryDOM, virtualizeDOM, parseDirectives, updateDOM } from '../functions';\n\n/**\n * @class Compiler\n * Compile the given template and push into the container\n * @param {string | element} container The container for the compiled html\n * @param {string | element} template The template to use for compilation\n * @param {object} data The object used for binding data and methods\n */\nclass Compiler {\n\tconstructor(container, template, data) {\n\t\t/** check container for string id, or element */\n\t\tif (typeof container === 'string') container = document.getElementById(container);\n\t\n\t\t/** check template for string id, or element */\n\t\tif (typeof template === 'string') template = document.getElementById(template);\n\t\n\t\t/** check the template for one and only one child */\n\t\tif (template.nodeName !== 'TEMPLATE') throw 'The template should be a template element (<template>)';\n\t\tif (template.content.children.length !== 1) throw 'The template must contain one root element.';\n\n\t\t/** public properties */\n\n\t\t/** @public {element} The container element */\n\t\tthis.container = container;\n\t\n\t\t/** @public {element} The template element */\n\t\tthis.template = template;\n\t\n\t\t/** @public {object} The data object that is used for binding data values and methods */\n\t\tthis.data = data;\n\n\t\t/** private properties */\n\n\t\t/** @private {boolean} A boolean indicating whether compilation has been initiated once */\n\t\tlet _initd = false;\n\t\tthis.setInitd = (initd) => {\n\t\t\t_initd = initd;\n\t\t\treturn this;\n\t\t};\n\t\tthis.initd = () => { return _initd; };\n\n\t\t/** @private {Observer} An instance of Observer that is watching data for us */\n\t\tlet _observer = new Observer(this.data, this.render, this)\n\t\tthis.getObserver = () => { return _observer; };\n\n\t\t/** @private {DirectiveContainer} The DirectiveContainer object */\n\t\tlet _directiveContainer = null;\n\t\tthis.setDirectiveContainer = (directiveContainer) => { _directiveContainer = directiveContainer; };\n\t\tthis.getDirectiveContainer = () => { return _directiveContainer; };\n\n\t\t/** empty the container */\n\t\temptyElement(this.container);\n\t}\n\n\t/** public methods */\n\n\t/** render out the processed template */\n\trender() {\n\t\t/** get the template and inner html */\n\t\tconst tempDOM = createTemporaryDOM(this.template, this.data, this.getDirectiveContainer().getDirectives());\n\n\t\t/** set the app */\n\t\tupdateDOM(this.container, virtualizeDOM(tempDOM.content.children[0]), this.initd() ? virtualizeDOM(this.container.children[0]) : undefined);\n\t\t\n\t\t/** cycle through post directives */\n\t\tparseDirectives(this.getDirectiveContainer().getDirectives().filter(dir => dir.isPost()), this.container, this.data);\n\n\t\t/** set initd to true */\n\t\tthis.setInitd(true);\n\t}\n}\n\n/** export Compiler */\nexport { Compiler };"]}