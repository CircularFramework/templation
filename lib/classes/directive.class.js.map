{"version":3,"sources":["../../src/classes/directive.class.js"],"names":["Directive","selector","parser","subSelectors","_order","setOrder","order","getOrder","_pre","setPre","pre","isPre","_post","setPost","post","isPost"],"mappings":";;;;;;;;;;AAAA;;;;;;IAMMA,S;AACL,oBAAYC,QAAZ,EAAsBC,MAAtB,EAA8B;AAAA;;AAAA;;AAC7B;;AAEA;AACA,OAAKD,QAAL,GAAgBA,QAAhB;;AAEA;AACA,OAAKC,MAAL,GAAcA,MAAd;;AAEA;AACA,OAAKC,YAAL,GAAoB,EAApB;;AAEA;;AAEA;AACA,MAAIC,SAAS,CAAb;AACA,OAAKC,QAAL,GAAgB,UAACC,KAAD,EAAW;AAC1BF,YAASE,KAAT;AACA;AACA,GAHD;AAIA,OAAKC,QAAL,GAAgB,YAAM;AAAE,UAAOH,MAAP;AAAgB,GAAxC;;AAEA;AACA,MAAII,OAAO,IAAX;AACA,OAAKC,MAAL,GAAc,UAACC,GAAD,EAAS;AACtBF,UAAOE,GAAP;AACA;AACA,GAHD;AAIA,OAAKC,KAAL,GAAa,YAAM;AAAE,UAAOH,IAAP;AAAc,GAAnC;;AAEA;AACA,MAAII,QAAQ,KAAZ;AACA,OAAKC,OAAL,GAAe,UAACC,IAAD,EAAU;AACxBF,WAAQE,IAAR;AACA;AACA,GAHD;AAIA,OAAKC,MAAL,GAAc,YAAM;AAAE,UAAOH,KAAP;AAAe,GAArC;AACA;;AAED;;AAEA;;;;;;;;;kCAKgBT,Y,EAAc;AAC7B,QAAKA,YAAL,GAAoBA,YAApB;AACA,UAAO,IAAP;AACA;;;;;;AAGF;;;QACSH,S,GAAAA,S","file":"directive.class.js","sourcesContent":["/**\n * @class Directive\n * Defines a directive that Templation will search for in the template and parse\n * @param {string} selector The selector that will be used in the directive (ex: crFor)\n * @param {function} parser The function that will be executed for the directive. The parser receives a reference to the directive, the effected element, and the associated data\n */\nclass Directive {\n\tconstructor(selector, parser) {\n\t\t/** public properties */\n\n\t\t/** @public {string} The selector name for the directive */\n\t\tthis.selector = selector;\n\t\t\n\t\t/** @public {function} The function that is executed for the directive */\n\t\tthis.parser = parser;\n\t\n\t\t/** @public {string[]} An array of sub selectors. Referenced by using a colon (:) after the main selector (ex: crOn:click) */\n\t\tthis.subSelectors = [];\n\t\n\t\t/** private properties */\n\n\t\t/** @private {number} A number indicating the order in which the directive should be processed */\n\t\tlet _order = 0;\n\t\tthis.setOrder = (order) => {\n\t\t\t_order = order;\n\t\t\treturn this;\n\t\t};\n\t\tthis.getOrder = () => { return _order; };\n\t\t\n\t\t/** @private {boolean} A boolean indicating if this directive should be processed before DOM insertion */\n\t\tlet _pre = true;\n\t\tthis.setPre = (pre) => {\n\t\t\t_pre = pre;\n\t\t\treturn this;\n\t\t};\n\t\tthis.isPre = () => { return _pre; };\n\n\t\t/** @private {boolean} A boolean indicating if this directive should be processed after DOM insertion */\n\t\tlet _post = false;\n\t\tthis.setPost = (post) => {\n\t\t\t_post = post;\n\t\t\treturn this;\n\t\t};\n\t\tthis.isPost = () => { return _post; };\n\t}\n\n\t/** public methods */\n\n\t/**\n\t * @method Set the sub selectors\n\t * @param {string[]} An array of strings to function as sub selectors\n\t * @returns {Directive}\n\t */\n\tsetSubSelectors(subSelectors) {\n\t\tthis.subSelectors = subSelectors;\n\t\treturn this;\n\t}\n}\n\n/** export Directive */\nexport { Directive };"]}