{"version":3,"sources":["../../src/classes/directive-container.class.js"],"names":["DirectiveContainer","directives","selector","match","find","dir","directive","setOrder","length","push","index","findIndex","splice","order","forEach","i","getOrder","dirs","sort","a","b"],"mappings":";;;;;;;;;;AAAA;;;;IAIMA,kB;AACL,+BAAc;AAAA;;AACb;;AAEA;AACA,OAAKC,UAAL,GAAkB,EAAlB;AACA;;AAED;;AAEA;;;;;;;;kCAIgB;AACf,UAAO,KAAKA,UAAZ;AACA;;AAED;;;;;;;+BAIaC,Q,EAAU;AACtB;AACA,OAAIC,QAAQ,KAAKF,UAAL,CAAgBG,IAAhB,CAAqB;AAAA,WAAOC,IAAIH,QAAJ,KAAiBA,QAAxB;AAAA,IAArB,CAAZ;AACA,UAAOC,KAAP;AACA;;AAED;;;;;;;;+BAKaG,S,EAAW;AACvB;AACAA,aAAUC,QAAV,CAAmB,KAAKN,UAAL,CAAgBO,MAAnC;AACA,QAAKP,UAAL,CAAgBQ,IAAhB,CAAqBH,SAArB;;AAEA;AACA,UAAO,IAAP;AACA;;AAED;;;;;;;;kCAKgBJ,Q,EAAU;AACzB;AACA,OAAIQ,QAAQ,KAAKT,UAAL,CAAgBU,SAAhB,CAA0B;AAAA,WAAON,IAAIH,QAAJ,KAAiBA,QAAxB;AAAA,IAA1B,CAAZ;AACA,OAAIQ,SAAS,CAAb,EAAgB,KAAKT,UAAL,CAAgBW,MAAhB,CAAuBF,KAAvB,EAA8B,CAA9B;;AAEhB;AACA,UAAO,IAAP;AACA;;AAED;;;;;;;;oCAKkBR,Q,EAAUW,K,EAAO;AAClC;AACA,OAAIH,QAAQ,KAAKT,UAAL,CAAgBU,SAAhB,CAA0B;AAAA,WAAON,IAAIH,QAAJ,KAAiBA,QAAxB;AAAA,IAA1B,CAAZ;AACA,OAAIQ,SAAS,CAAb,EAAgB;AACf;AACA,SAAKT,UAAL,CAAgBS,KAAhB,EAAuBH,QAAvB,CAAgCM,KAAhC;;AAEA;AACA,SAAKZ,UAAL,CAAgBa,OAAhB,CAAwB,UAACT,GAAD,EAAMU,CAAN,EAAY;AACnC,SAAIA,IAAIL,KAAR,EAAeL,IAAIE,QAAJ,CAAaF,IAAIW,QAAJ,KAAiB,CAA9B;AACf,KAFD;;AAIA;AACAC,SAAKC,IAAL,CAAU,UAASC,CAAT,EAAYC,CAAZ,EAAe;AACxB,YAAOD,EAAEN,KAAF,GAAUO,EAAEP,KAAnB;AACA,KAFD;AAGA;;AAED;AACA,UAAO,IAAP;AACA;;;;;;AAGF;;;QACSb,kB,GAAAA,kB","file":"directive-container.class.js","sourcesContent":["/**\n * @class DirectiveContainer\n * Contains all the defined Directives and allows for managing them\n */\nclass DirectiveContainer {\n\tconstructor() {\n\t\t/** public properties */\n\n\t\t/** @public {Directive[]} An array of Directive objects */\n\t\tthis.directives = [];\n\t}\n\n\t/** public methods */\n\n\t/**\n\t * Get the directives\n\t * @return {Directive[]}\n\t */\n\tgetDirectives() {\n\t\treturn this.directives;\n\t}\n\n\t/**\n\t * Get a specific directive\n\t * @return {Directive}\n\t */\n\tgetDirective(selector) {\n\t\t/** find the directive */\n\t\tlet match = this.directives.find(dir => dir.selector === selector);\n\t\treturn match;\n\t}\n\n\t/**\n\t * Add a new directive\n\t * @param {Directive} directive A directive to add to the configured directives container\n\t * @return {DirectiveContainer}\n\t */\n\taddDirective(directive) {\n\t\t/** set the order and add to directives list */\n\t\tdirective.setOrder(this.directives.length);\n\t\tthis.directives.push(directive);\n\t\t\n\t\t/** return DirectiveContainer */\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove a directive\n\t * @param {string} selector A name of a directive to remove\n\t * @return {DirectiveContainer}\n\t */\n\tremoveDirective(selector) {\n\t\t/** find the index of the directive */\n\t\tlet index = this.directives.findIndex(dir => dir.selector === selector);\n\t\tif (index >= 0) this.directives.splice(index, 1);\n\n\t\t/** return DirectiveContainer */\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the order of a directive\n\t * @param {string} selector A name of a directive to reorder\n\t * @return {DirectiveContainer}\n\t */\n\tsetDirectiveOrder(selector, order) {\n\t\t/** find the matching directives */\n\t\tlet index = this.directives.findIndex(dir => dir.selector === selector);\n\t\tif (index >= 0) {\n\t\t\t/** set the order */\n\t\t\tthis.directives[index].setOrder(order);\n\n\t\t\t/** add 1 to each directives over after this one */\n\t\t\tthis.directives.forEach((dir, i) => {\n\t\t\t\tif (i > index) dir.setOrder(dir.getOrder() + 1);\n\t\t\t});\n\n\t\t\t/** sort the directives */\n\t\t\tdirs.sort(function(a, b) {\n\t\t\t\treturn a.order - b.order;\n\t\t\t});\n\t\t}\n\n\t\t/** return DirectiveContainer */\n\t\treturn this;\n\t}\n}\n\n/** export the DirectiveContainer */\nexport { DirectiveContainer };"]}