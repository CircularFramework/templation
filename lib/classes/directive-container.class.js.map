{"version":3,"sources":["../../src/classes/directive-container.class.js"],"names":["DirectiveContainer","directives","selector","match","find","dir","directive","setOrder","length","push","index","findIndex","splice","order","forEach","i","getOrder","dirs","sort","a","b"],"mappings":"itBAAA;;;MAIMA,mB,YACL,6BAAc,0CACb,wBAEA,0DACA,KAAKC,UAAL,CAAkB,EAClB,CAED,qBAEA;;;wFAIgB,CACf,MAAO,MAAKA,UACZ,CAED;;;sDAIaC,Q,CAAU,CACtB,yBACA,GAAIC,OAAQ,KAAKF,UAAL,CAAgBG,IAAhB,CAAqB,oBAAOC,KAAIH,QAAJ,GAAiBA,QAAxB,CAArB,CAAZ,CACA,MAAOC,MACP,CAED;;;;sDAKaG,S,CAAW,CACvB,+CACAA,UAAUC,QAAV,CAAmB,KAAKN,UAAL,CAAgBO,MAAnC,EACA,KAAKP,UAAL,CAAgBQ,IAAhB,CAAqBH,SAArB,EAEA,gCACA,MAAO,KACP,CAED;;;;4DAKgBJ,Q,CAAU,CACzB,sCACA,GAAIQ,OAAQ,KAAKT,UAAL,CAAgBU,SAAhB,CAA0B,oBAAON,KAAIH,QAAJ,GAAiBA,QAAxB,CAA1B,CAAZ,CACA,GAAIQ,OAAS,CAAb,CAAgB,KAAKT,UAAL,CAAgBW,MAAhB,CAAuBF,KAAvB,CAA8B,CAA9B,EAEhB,gCACA,MAAO,KACP,CAED;;;;gEAKkBR,Q,CAAUW,K,CAAO,CAClC,mCACA,GAAIH,OAAQ,KAAKT,UAAL,CAAgBU,SAAhB,CAA0B,oBAAON,KAAIH,QAAJ,GAAiBA,QAAxB,CAA1B,CAAZ,CACA,GAAIQ,OAAS,CAAb,CAAgB,CACf,oBACA,KAAKT,UAAL,CAAgBS,KAAhB,EAAuBH,QAAvB,CAAgCM,KAAhC,EAEA,mDACA,KAAKZ,UAAL,CAAgBa,OAAhB,CAAwB,SAACT,GAAD,CAAMU,CAAN,CAAY,CACnC,GAAIA,EAAIL,KAAR,CAAeL,IAAIE,QAAJ,CAAaF,IAAIW,QAAJ,GAAiB,CAA9B,CACf,CAFD,EAIA,0BACAC,KAAKC,IAAL,CAAU,SAASC,CAAT,CAAYC,CAAZ,CAAe,CACxB,MAAOD,GAAEN,KAAF,CAAUO,EAAEP,KACnB,CAFD,CAGA,CAED,gCACA,MAAO,KACP,C,iCAGF,oC,QACSb,kB,CAAAA,kB","file":"directive-container.class.js","sourcesContent":["/**\n * @class DirectiveContainer\n * Contains all the defined Directives and allows for managing them\n */\nclass DirectiveContainer {\n\tconstructor() {\n\t\t/** public properties */\n\n\t\t/** @public {Directive[]} An array of Directive objects */\n\t\tthis.directives = [];\n\t}\n\n\t/** public methods */\n\n\t/**\n\t * Get the directives\n\t * @return {Directive[]}\n\t */\n\tgetDirectives() {\n\t\treturn this.directives;\n\t}\n\n\t/**\n\t * Get a specific directive\n\t * @return {Directive}\n\t */\n\tgetDirective(selector) {\n\t\t/** find the directive */\n\t\tlet match = this.directives.find(dir => dir.selector === selector);\n\t\treturn match;\n\t}\n\n\t/**\n\t * Add a new directive\n\t * @param {Directive} directive A directive to add to the configured directives container\n\t * @return {DirectiveContainer}\n\t */\n\taddDirective(directive) {\n\t\t/** set the order and add to directives list */\n\t\tdirective.setOrder(this.directives.length);\n\t\tthis.directives.push(directive);\n\t\t\n\t\t/** return DirectiveContainer */\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove a directive\n\t * @param {string} selector A name of a directive to remove\n\t * @return {DirectiveContainer}\n\t */\n\tremoveDirective(selector) {\n\t\t/** find the index of the directive */\n\t\tlet index = this.directives.findIndex(dir => dir.selector === selector);\n\t\tif (index >= 0) this.directives.splice(index, 1);\n\n\t\t/** return DirectiveContainer */\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the order of a directive\n\t * @param {string} selector A name of a directive to reorder\n\t * @return {DirectiveContainer}\n\t */\n\tsetDirectiveOrder(selector, order) {\n\t\t/** find the matching directives */\n\t\tlet index = this.directives.findIndex(dir => dir.selector === selector);\n\t\tif (index >= 0) {\n\t\t\t/** set the order */\n\t\t\tthis.directives[index].setOrder(order);\n\n\t\t\t/** add 1 to each directives over after this one */\n\t\t\tthis.directives.forEach((dir, i) => {\n\t\t\t\tif (i > index) dir.setOrder(dir.getOrder() + 1);\n\t\t\t});\n\n\t\t\t/** sort the directives */\n\t\t\tdirs.sort(function(a, b) {\n\t\t\t\treturn a.order - b.order;\n\t\t\t});\n\t\t}\n\n\t\t/** return DirectiveContainer */\n\t\treturn this;\n\t}\n}\n\n/** export the DirectiveContainer */\nexport { DirectiveContainer };"]}