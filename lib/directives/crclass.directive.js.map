{"version":3,"sources":["../../src/directives/crclass.directive.js"],"names":["crClassDirective","classCheck","details","classElement","data","classList","i","length","push","classObj","value","hasClass","className","includes","Object","keys","forEach","key","splice","indexOf","join"],"mappings":";;;;;;;AACA;;AACA;;AAEA;AAJA;AAKA,IAAMA,mBAAmB,yBAAc,SAAd,EAAyBC,UAAzB,CAAzB;;AAEA;QACSD,gB,GAAAA,gB;;AAET;;AACA,SAASC,UAAT,CAAoBC,OAApB,EAA6BC,YAA7B,EAA2CC,IAA3C,EAAiD;AAChD;AACA,KAAIC,YAAY,EAAhB;AACA,MAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,aAAaE,SAAb,CAAuBE,MAA3C,EAAmDD,GAAnD,EAAwD;AACvDD,YAAUG,IAAV,CAAeL,aAAaE,SAAb,CAAuBC,CAAvB,CAAf;AACA;;AAED;AACA,KAAIG,WAAW,sBAAML,IAAN,EAAYF,QAAQQ,KAApB,CAAf;;AAEA;AACA,KAAMC,WAAW,SAAXA,QAAW,CAACC,SAAD,EAAe;AAC/B,SAAOP,UAAUQ,QAAV,CAAmBD,SAAnB,CAAP;AACA,EAFD;;AAIA;AACAE,QAAOC,IAAP,CAAYN,QAAZ,EAAsBO,OAAtB,CAA8B,eAAO;AACpC;AACA,MAAIP,SAASQ,GAAT,MAAkB,IAAtB,EAA4B;AAC3B,OAAI,CAACN,SAASM,GAAT,CAAL,EAAoBZ,UAAUG,IAAV,CAAeS,GAAf;AACpB,GAFD,MAEO;AACN,OAAIN,SAASM,GAAT,CAAJ,EAAmBZ,UAAUa,MAAV,CAAiBb,UAAUc,OAAV,CAAkBF,GAAlB,CAAjB,EAAyC,CAAzC;AACnB;AACD,EAPD;;AASA;AACAd,cAAaE,SAAb,GAAyBA,UAAUe,IAAV,CAAe,GAAf,CAAzB;AACA","file":"crclass.directive.js","sourcesContent":["/** import dependencies */\nimport { Directive } from '../classes/directive.class';\nimport { using } from '../functions';\n\n/** create the directive */\nconst crClassDirective = new Directive('crClass', classCheck);\n\n/** export the directive */\nexport { crClassDirective };\n\n/** define the directive parser function */\nfunction classCheck(details, classElement, data) {\n\t/** get the current class list */\n\tlet classList = [];\n\tfor (var i = 0; i < classElement.classList.length; i++) {\n\t\tclassList.push(classElement.classList[i]);\n\t}\n\n\t/** evaluate the expression */\n\tlet classObj = using(data, details.value);\n\t\n\t/** create internal class check function */\n\tconst hasClass = (className) => {\n\t\treturn classList.includes(className);\n\t};\n\n\t/** add/remove classes */\n\tObject.keys(classObj).forEach(key => {\n\t\t/** check if the class is true */\n\t\tif (classObj[key] === true) {\n\t\t\tif (!hasClass(key)) classList.push(key);\n\t\t} else {\n\t\t\tif (hasClass(key)) classList.splice(classList.indexOf(key), 1);\n\t\t}\n\t});\n\n\t/** reset the class list */\n\tclassElement.classList = classList.join(' ');\n}"]}