{"version":3,"sources":["../../src/directives/crclass.directive.js"],"names":["crClassDirective","classCheck","details","classElement","data","classList","i","length","push","classObj","value","hasClass","className","includes","Object","keys","forEach","key","splice","indexOf","join"],"mappings":"yGACA,qDACA,uCAEA,2BAJA,0BAKA,GAAMA,kBAAmB,yBAAc,SAAd,CAAyBC,UAAzB,CAAzB,CAEA,2B,QACSD,gB,CAAAA,gB,CAET,2CACA,QAASC,WAAT,CAAoBC,OAApB,CAA6BC,YAA7B,CAA2CC,IAA3C,CAAiD,CAChD,iCACA,GAAIC,WAAY,EAAhB,CACA,IAAK,GAAIC,GAAI,CAAb,CAAgBA,EAAIH,aAAaE,SAAb,CAAuBE,MAA3C,CAAmDD,GAAnD,CAAwD,CACvDD,UAAUG,IAAV,CAAeL,aAAaE,SAAb,CAAuBC,CAAvB,CAAf,CACA,CAED,8BACA,GAAIG,UAAW,qBAAML,IAAN,CAAYF,QAAQQ,KAApB,CAAf,CAEA,2CACA,GAAMC,UAAW,QAAXA,SAAW,CAACC,SAAD,CAAe,CAC/B,MAAOP,WAAUQ,QAAV,CAAmBD,SAAnB,CACP,CAFD,CAIA,yBACAE,OAAOC,IAAP,CAAYN,QAAZ,EAAsBO,OAAtB,CAA8B,aAAO,CACpC,iCACA,GAAIP,SAASQ,GAAT,IAAkB,IAAtB,CAA4B,CAC3B,GAAI,CAACN,SAASM,GAAT,CAAL,CAAoBZ,UAAUG,IAAV,CAAeS,GAAf,CACpB,CAFD,IAEO,CACN,GAAIN,SAASM,GAAT,CAAJ,CAAmBZ,UAAUa,MAAV,CAAiBb,UAAUc,OAAV,CAAkBF,GAAlB,CAAjB,CAAyC,CAAzC,CACnB,CACD,CAPD,EASA,2BACAd,aAAaE,SAAb,CAAyBA,UAAUe,IAAV,CAAe,GAAf,CACzB","file":"crclass.directive.js","sourcesContent":["/** import dependencies */\nimport { Directive } from '../classes/directive.class';\nimport { using } from '../functions';\n\n/** create the directive */\nconst crClassDirective = new Directive('crClass', classCheck);\n\n/** export the directive */\nexport { crClassDirective };\n\n/** define the directive parser function */\nfunction classCheck(details, classElement, data) {\n\t/** get the current class list */\n\tlet classList = [];\n\tfor (var i = 0; i < classElement.classList.length; i++) {\n\t\tclassList.push(classElement.classList[i]);\n\t}\n\n\t/** evaluate the expression */\n\tlet classObj = using(data, details.value);\n\t\n\t/** create internal class check function */\n\tconst hasClass = (className) => {\n\t\treturn classList.includes(className);\n\t};\n\n\t/** add/remove classes */\n\tObject.keys(classObj).forEach(key => {\n\t\t/** check if the class is true */\n\t\tif (classObj[key] === true) {\n\t\t\tif (!hasClass(key)) classList.push(key);\n\t\t} else {\n\t\t\tif (hasClass(key)) classList.splice(classList.indexOf(key), 1);\n\t\t}\n\t});\n\n\t/** reset the class list */\n\tclassElement.classList = classList.join(' ');\n}"]}